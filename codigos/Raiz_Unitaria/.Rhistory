ci_fp = est-qs
p_value = 2*min(mean((est<=bs_distr)),mean((est>=bs_distr)))
return(list('effect'= est, 'ci'=ci_fp, 'p_value'= p_value))
}
#Example
#setting seed to allow replication
set.seed(123)
#Creating fake data
data = data.frame("y"= rnorm(100), "d" = c(1,1,1,rep(0,97)), "x" = rchisq(100, 3), "n" =  rpois(100, 10)+1 )
#Introducing treatment effect and heterokesdaticity in outcome
data$y = data$y + 1.4*data$d + rnorm(100, sd = 1/sqrt(data$n))
few_treated_ci(data, "y","d", c("x"), hetero_var = "n")
arma12 = ts(arima.sim(list(ar=0.7, ma =c(1,0.5) )n = 500),start= 0)
arma12 = ts(arima.sim(list(ar=0.7, ma =c(1,0.5) ),n = 500),start= 0)
plot(arma12)
#Função para simular um processo da forma
#Y_t = alpha + rho*y_{t-1} + epsilon_t
#onde epsilon_t ~ N(0, sigma^2) iid
#Se |rho| < 1, processo é inicializado como y_0 ~ N(alpha/(1-rho), sigma^2/(1-rho^2))
#do contrário, processo inicia em alpha.
ar.sim <- function(Nperiods, rho, alpha = 0, sigma = 1)
{
if(abs(rho)<1)
y = rnorm(1, alpha/(1-rho), sd = sigma/sqrt(1-rho^2)) else y = alpha
epsilon = rnorm(Nperiods, mean = 0, sd = sigma)
for(j in 1:Nperiods)
y = c(y, alpha + rho*y[j] + epsilon[j])
return(y)
}
#Função para simular um MA(q) Gaussiano. O comprimento do vetor q determina a ordem do MA
ma.sim <- function(Nperiods, psi = c(), alpha = 0, sigma = 1)
{
noise = rnorm(Nperiods+length(psi), sd = sigma)
vec_lg = sapply(0:length(psi), function(x){
noise[(length(psi)-x+1):(length(noise)-x)]
})
mov = as.numeric(vec_lg%*%c(1,psi))
}
#Fixa semente do simulador - para replicar resultados
set.seed(13579)
#Simulando ruído branco
rb = ts(ar.sim(500, rho = 0), start=0)
plot(rb)
#Simulando AR1
ar1 = ts(ar.sim(500, rho = 0.7), start=0)
plot(ar1)
#Simulando MA2
#Vamos usar a função arima.sim, do pacote stats (carregando, por padrão, no R)
ma2 = ts(ma.sim( 500, psi = c(1,0.5) ),start = 0)
plot(ma2)
#Processo determinístico
det = 0.01*0:500 + rb
plot(ts(det,start=0))
#Simulando ARMA(1,2)
arma12 = ts(arima.sim(list(ar=0.7, ma =c(1,0.5) ),n = 500),start= 0)
#Função para simular um processo da forma
#Y_t = alpha + rho*y_{t-1} + epsilon_t
#onde epsilon_t ~ N(0, sigma^2) iid
#Se |rho| < 1, processo é inicializado como y_0 ~ N(alpha/(1-rho), sigma^2/(1-rho^2))
#do contrário, processo inicia em alpha.
ar.sim <- function(Nperiods, rho, alpha = 0, sigma = 1)
{
if(abs(rho)<1)
y = rnorm(1, alpha/(1-rho), sd = sigma/sqrt(1-rho^2)) else y = alpha
epsilon = rnorm(Nperiods, mean = 0, sd = sigma)
for(j in 1:Nperiods)
y = c(y, alpha + rho*y[j] + epsilon[j])
return(y)
}
#Função para simular um MA(q) Gaussiano. O comprimento do vetor q determina a ordem do MA
ma.sim <- function(Nperiods, psi = c(), alpha = 0, sigma = 1)
{
noise = rnorm(Nperiods+length(psi), sd = sigma)
vec_lg = sapply(0:length(psi), function(x){
noise[(length(psi)-x+1):(length(noise)-x)]
})
mov = as.numeric(vec_lg%*%c(1,psi))
}
#Fixa semente do simulador - para replicar resultados
set.seed(13579)
#Simulando ruído branco
rb = ts(ar.sim(500, rho = 0), start=0)
plot(rb)
#Simulando AR1
ar1 = ts(ar.sim(500, rho = 0.7), start=0)
plot(ar1)
#Simulando MA2
#Vamos usar a função arima.sim, do pacote stats (carregando, por padrão, no R)
ma2 = ts(ma.sim( 500, psi = c(1,0.5) ),start = 0)
plot(ma2)
#Simulando ARMA(1,2)
arma12 = ts(arima.sim(list(ar=0.7, ma =c(1,0.5) ),n = 500),start= 0)
plot(arma12)
#Processo determinístico
det = 0.01*0:500 + rb
plot(ts(det,start=0))
#Passeio aleatorio
rw = ts(ar.sim(500, rho=1), start = 0)
plot(rw)
arma12 = ts(arima.sim(list(ar=0.7, ma =c(1,-0.5) ),n = 500),start= 0)
plot(arma12)
arma12 = ts(arima.sim(list(ar=0.7, ma =c(-1,0.5) ),n = 500),start= 0)
plot(arma12)
arma12 = ts(arima.sim(list(ar=0.7, ma =c(1,0.5) ),n = 500),start= 0)
plot(arma12)
#Função para simular um processo da forma
#Y_t = alpha + rho*y_{t-1} + epsilon_t
#onde epsilon_t ~ N(0, sigma^2) iid
#Se |rho| < 1, processo é inicializado como y_0 ~ N(alpha/(1-rho), sigma^2/(1-rho^2))
#do contrário, processo inicia em alpha.
ar.sim <- function(Nperiods, rho, alpha = 0, sigma = 1)
{
if(abs(rho)<1)
y = rnorm(1, alpha/(1-rho), sd = sigma/sqrt(1-rho^2)) else y = alpha
epsilon = rnorm(Nperiods, mean = 0, sd = sigma)
for(j in 1:Nperiods)
y = c(y, alpha + rho*y[j] + epsilon[j])
return(y)
}
#Função para simular um MA(q) Gaussiano. O comprimento do vetor q determina a ordem do MA
ma.sim <- function(Nperiods, psi = c(), alpha = 0, sigma = 1)
{
noise = rnorm(Nperiods+length(psi), sd = sigma)
vec_lg = sapply(0:length(psi), function(x){
noise[(length(psi)-x+1):(length(noise)-x)]
})
mov = as.numeric(vec_lg%*%c(1,psi))
}
#Fixa semente do simulador - para replicar resultados
set.seed(13579)
#Simulando ruído branco
rb = ts(ar.sim(500, rho = 0), start=0)
plot(rb)
#Simulando AR1
ar1 = ts(ar.sim(500, rho = 0.7), start=0)
plot(ar1)
#Simulando MA2
#Vamos usar a função arima.sim, do pacote stats (carregando, por padrão, no R)
ma2 = ts(ma.sim( 500, psi = c(1,0.5) ),start = 0)
plot(ma2)
#Simulando ARMA(1,2)
arma12 = ts(arima.sim(list(ar=0.7, ma =c(1,0.5) ),n = 500),start= 0)
plot(arma12)
#Processo determinístico
det = 0.01*0:500 + rb
plot(ts(det,start=0))
#Passeio aleatorio
rw = ts(ar.sim(500, rho=1), start = 0)
plot(rw)
mean_break = ts(c(ar.sim(500, rho=0), 1+ar.sim(500, rho=0)), start = 0)
mean_break = ts(c(ar.sim(250, rho=0), 1+ar.sim(250, rho=0)), start = 0)
plot(mean_break)
mean_break = ts(c(ar.sim(250, rho=0), 2+ar.sim(250, rho=0)), start = 0)
plot(mean_break)
sd_break = ts(c(ar.sim(250, rho=0), sqrt(2)*ar.sim(250, rho=0)), start = 0)
plot(sd_break)
sd_break = ts(c(ar.sim(250, rho=0), 2*ar.sim(250, rho=0)), start = 0)
plot(sd_break)
#Função para simular um processo da forma
#Y_t = alpha + rho*y_{t-1} + epsilon_t
#onde epsilon_t ~ N(0, sigma^2) iid
#Se |rho| < 1, processo é inicializado como y_0 ~ N(alpha/(1-rho), sigma^2/(1-rho^2))
#do contrário, processo inicia em alpha.
ar.sim <- function(Nperiods, rho, alpha = 0, sigma = 1)
{
if(abs(rho)<1)
y = rnorm(1, alpha/(1-rho), sd = sigma/sqrt(1-rho^2)) else y = alpha
epsilon = rnorm(Nperiods, mean = 0, sd = sigma)
for(j in 1:Nperiods)
y = c(y, alpha + rho*y[j] + epsilon[j])
return(y)
}
#Função para simular um MA(q) Gaussiano. O comprimento do vetor q determina a ordem do MA
ma.sim <- function(Nperiods, psi = c(), alpha = 0, sigma = 1)
{
noise = rnorm(Nperiods+length(psi), sd = sigma)
vec_lg = sapply(0:length(psi), function(x){
noise[(length(psi)-x+1):(length(noise)-x)]
})
mov = as.numeric(vec_lg%*%c(1,psi))
}
#Fixa semente do simulador - para replicar resultados
set.seed(13579)
#Simulando ruído branco
rb = ts(ar.sim(500, rho = 0), start=0)
plot(rb)
#Simulando AR1
ar1 = ts(ar.sim(500, rho = 0.7), start=0)
plot(ar1)
#Simulando MA2
#Vamos usar a função arima.sim, do pacote stats (carregando, por padrão, no R)
ma2 = ts(ma.sim( 500, psi = c(1,0.5) ),start = 0)
plot(ma2)
#Simulando ARMA(1,2)
arma12 = ts(arima.sim(list(ar=0.7, ma =c(1,0.5) ),n = 500),start= 0)
plot(arma12)
#Processo determinístico
det = 0.01*0:500 + rb
plot(ts(det,start=0))
#Passeio aleatorio
rw = ts(ar.sim(500, rho=1), start = 0)
plot(rw)
#Quebra de média
mean_break = ts(c(ar.sim(250, rho=0), 2+ar.sim(250, rho=0)), start = 0)
plot(mean_break)
#Quebra da variância
sd_break = ts(c(ar.sim(250, rho=0), sqrt(2)*ar.sim(250, rho=0)), start = 0)
plot(sd_break)
#Função para simular um processo da forma
#Y_t = alpha + rho*y_{t-1} + epsilon_t
#onde epsilon_t ~ N(0, sigma^2) iid
#Se |rho| < 1, processo é inicializado como y_0 ~ N(alpha/(1-rho), sigma^2/(1-rho^2))
#do contrário, processo inicia em alpha.
ar.sim <- function(Nperiods, rho, alpha = 0, sigma = 1)
{
if(abs(rho)<1)
y = rnorm(1, alpha/(1-rho), sd = sigma/sqrt(1-rho^2)) else y = alpha
epsilon = rnorm(Nperiods, mean = 0, sd = sigma)
for(j in 1:Nperiods)
y = c(y, alpha + rho*y[j] + epsilon[j])
return(y)
}
#Função para simular um MA(q) Gaussiano. O comprimento do vetor q determina a ordem do MA
ma.sim <- function(Nperiods, psi = c(), alpha = 0, sigma = 1)
{
noise = rnorm(Nperiods+length(psi), sd = sigma)
vec_lg = sapply(0:length(psi), function(x){
noise[(length(psi)-x+1):(length(noise)-x)]
})
mov = as.numeric(vec_lg%*%c(1,psi))
}
#Fixa semente do simulador - para replicar resultados
set.seed(13579)
#Simulando ruído branco
rb = ts(ar.sim(500, rho = 0), start=0)
plot(rb)
#Simulando AR1
ar1 = ts(ar.sim(500, rho = 0.7), start=0)
plot(ar1)
#Simulando MA2
#Vamos usar a função arima.sim, do pacote stats (carregando, por padrão, no R)
ma2 = ts(ma.sim( 500, psi = c(1,0.5) ),start = 0)
plot(ma2)
#Simulando ARMA(1,2)
arma12 = ts(arima.sim(list(ar=0.7, ma =c(1,0.5) ),n = 500),start= 0)
plot(arma12)
#Processo determinístico
det = 0.01*0:500 + rb
plot(ts(det,start=0))
#Passeio aleatorio
rw = ts(ar.sim(500, rho=1), start = 0)
plot(rw)
#Quebra de média
mean_break = ts(c(ar.sim(250, rho=0), 2+ar.sim(250, rho=0)), start = 0)
plot(mean_break)
#Quebra da variância
sd_break = ts(c(ar.sim(250, rho=0), sqrt(4)*ar.sim(250, rho=0)), start = 0)
plot(sd_break)
break_mean = ts(c(ar.sim(250, rho=0),2+ar.sim(250,rho=0)), start = 0)
#Função para simular um processo da forma
#Y_t = alpha + rho*y_{t-1} + epsilon_t
#onde epsilon_t ~ N(0, sigma^2) iid
#Se |rho| < 1, processo é inicializado como y_0 ~ N(alpha/(1-rho), sigma^2/(1-rho^2))
#do contrário, processo inicia em alpha.
ar.sim <- function(Nperiods, rho, alpha = 0, sigma = 1)
{
if(abs(rho)<1)
y = rnorm(1, alpha/(1-rho), sd = sigma/sqrt(1-rho^2)) else y = alpha
epsilon = rnorm(Nperiods, mean = 0, sd = sigma)
for(j in 1:Nperiods)
y = c(y, alpha + rho*y[j] + epsilon[j])
return(y)
}
#Função para simular um MA(q) Gaussiano. O comprimento do vetor q determina a ordem do MA
ma.sim <- function(Nperiods, psi = c(), alpha = 0, sigma = 1)
{
noise = rnorm(Nperiods+length(psi), sd = sigma)
vec_lg = sapply(0:length(psi), function(x){
noise[(length(psi)-x+1):(length(noise)-x)]
})
mov = as.numeric(vec_lg%*%c(1,psi))
}
#Fixa semente do simulador - para replicar resultados
set.seed(13579)
#Simulando ruído branco
rb = ts(ar.sim(500, rho = 0), start=0)
plot(rb)
#Simulando AR1
ar1 = ts(ar.sim(500, rho = 0.7), start=0)
plot(ar1)
#Simulando MA2
#Vamos usar a função arima.sim, do pacote stats (carregando, por padrão, no R)
ma2 = ts(ma.sim( 500, psi = c(1,0.5) ),start = 0)
plot(ma2)
#Simulando ARMA(1,2)
arma12 = ts(arima.sim(list(ar=0.7, ma =c(1,0.5) ),n = 500),start= 0)
plot(arma12)
#Processo determinístico
det = 0.01*0:500 + rb
plot(ts(det,start=0))
#Passeio aleatorio
rw = ts(ar.sim(500, rho=1), start = 0)
plot(rw)
#Quebra de média
break_mean = ts(c(ar.sim(250, rho=0),2+ar.sim(250,rho=0)), start = 0)
plot(break_mean)
#Função para simular um processo da forma
#Y_t = alpha + rho*y_{t-1} + epsilon_t
#onde epsilon_t ~ N(0, sigma^2) iid
#Se |rho| < 1, processo é inicializado como y_0 ~ N(alpha/(1-rho), sigma^2/(1-rho^2))
#do contrário, processo inicia em alpha.
ar.sim <- function(Nperiods, rho, alpha = 0, sigma = 1)
{
if(abs(rho)<1)
y = rnorm(1, alpha/(1-rho), sd = sigma/sqrt(1-rho^2)) else y = alpha
epsilon = rnorm(Nperiods, mean = 0, sd = sigma)
for(j in 1:Nperiods)
y = c(y, alpha + rho*y[j] + epsilon[j])
return(y)
}
#Função para simular um MA(q) Gaussiano. O comprimento do vetor q determina a ordem do MA
ma.sim <- function(Nperiods, psi = c(), alpha = 0, sigma = 1)
{
noise = rnorm(Nperiods+length(psi), sd = sigma)
vec_lg = sapply(0:length(psi), function(x){
noise[(length(psi)-x+1):(length(noise)-x)]
})
mov = as.numeric(vec_lg%*%c(1,psi))
}
#Fixa semente do simulador - para replicar resultados
set.seed(13579)
#Simulando ruído branco
rb = ts(ar.sim(500, rho = 0), start=0)
plot(rb)
#Simulando AR1
ar1 = ts(ar.sim(500, rho = 0.7), start=0)
plot(ar1)
#Simulando MA2
#Vamos usar a função arima.sim, do pacote stats (carregando, por padrão, no R)
ma2 = ts(ma.sim( 500, psi = c(1,0.5) ),start = 0)
plot(ma2)
#Simulando ARMA(1,2)
arma12 = ts(arima.sim(list(ar=0.7, ma =c(1,0.5) ),n = 500),start= 0)
plot(arma12)
#Processo determinístico
det = 0.01*0:500 + rb
plot(ts(det,start=0))
#Passeio aleatorio
rw = ts(ar.sim(500, rho=1), start = 0)
plot(rw)
#Quebra de nível
break_mean = ts(c(ar.sim(250, rho=0),2+ar.sim(250,rho=0)), start = 0)
plot(break_mean)
#Quebra de variância
break_sd = ts(c(ar.sim(250, rho=0),2*ar.sim(250,rho=0)), start = 0)
plot(break_sd)
#Fixando semente para permitir a replicação
set.seed(123)
#Modelo aditivo da forma
#a*sin(2*pi*t/12)  + u_t, onde u_t é passeio aleatório
add_model = ts(sin(2*pi*1:500/12) + cumsum(rnorm(500)),start= 0)
plot(add_model)
plot(diff(add_model))
#Modelo multiplicativo da forma
#a*t*u_t, onde u_t é passeio aleatório
mult_model = ts(1:500*cumsum(rnorm(500)),start= 0)
plot(mult_model)
plot(diff(mult_model))
#Fixando semente para permitir a replicação
set.seed(123)
#Modelo aditivo da forma
#a*sin(2*pi*t/12)  + u_t, onde u_t é passeio aleatório
add_model = ts(sin(2*pi*1:500/12) + cumsum(rnorm(500)),start= 0)
plot(add_model)
plot(diff(add_model))
mult_model = ts(1:500*cumsum(rnorm(500)),start= 0)
plot(mult_model)
plot(diff(mult_model))
#Decompondo séries de tempo
#Fixando pasta com arquivos
setwd("~/Documentos/GitHub/Econometria-III/codigos/Raiz_Unitaria")
#Carregando pacotes necessários. Instale-os se não os possuir
library("CADFtest") # testes de raiz unitária
library("sandwich") #Erros padrão HAC
library("lmtest") #Teste robusto
library("car") #Teste de restrições lineares
library("urca")
dados = data("nporg")
data("nporg")
View(nporg)
industrial_prod  = ts(nporg$ip, start = nporg$year[1])
industrial_prod
industrial_prod  = ts(nporg$ip, start = nporg$year[1], frequency = 1)
industrial_prod
plot(industrial_prod)
industrial_prod  = ts(log(nporg$ip), start = nporg$year[1], frequency = 1)
plot(industrial_prod)
#Carregando dados disponíveis no pacote URCA
library("urca")
data("nporg")
industrial_prod  = ts(log(nporg$ip), start = nporg$year[1], frequency = 1)
plot(industrial_prod)
#Começamos pelo modelo mais completo:
teste = CADFtest(industrial_prod, type = "trend", max.lag.y = ceiling(12*(length(industrial_prod)/100)^(1/4)),
criterion = "MAIC")
print(teste)
print(teste$est.model)
linearHypothesis(teste$est.model,c("trnd = 0", "L(y, 1) = 0" ))
teste = CADFtest(industrial_prod, type = "drift", max.lag.y = ceiling(12*(length(industrial_prod)/100)^(1/4)),
criterion = "MAIC")
print(teste)
#Decompondo séries de tempo
#Fixando pasta com arquivos
setwd("~/Documentos/GitHub/Econometria-III/codigos/Raiz_Unitaria")
#Carregando pacotes necessários. Instale-os se não os possuir
library("CADFtest") # testes de raiz unitária
library("sandwich") #Erros padrão HAC
library("lmtest") #Teste robusto
library("car") #Teste de restrições lineares
#Carregando dados disponíveis no pacote URCA
library("urca")
data("nporg")
industrial_prod  = ts(log(nporg$ip), start = nporg$year[1], frequency = 1)
plot(industrial_prod)
#Testando a presença de raízes unitárias
#Vamos conduzir os testes a 10% de significância
#Começamos pelo modelo mais completo:
teste = CADFtest(industrial_prod, type = "trend", max.lag.y = ceiling(12*(length(industrial_prod)/100)^(1/4)),
criterion = "MAIC")
print(teste)
#O teste t NÃO rejeita a hipótese nula de uma raiz unitária, a 10% (p-valor é de 0.1394 > 0.10)
#Vamos conduzir o teste F para detectar se o modelo de fato apresenta tendência linear
print(teste$est.model)
linearHypothesis(teste$est.model,c("trnd = 0", "L(y, 1) = 0" ))
#A estatística F é de 4.48865. Usando o Caso 4 da tabela na página 11 dos slides, vemos que, a 10% de significância,
#o valor crítico para 144 observações é 5.47. Como F < 5.47, não rejeitamos a hipótese nula de que tanto gamma como beta são zero.
#Assim, vamos para o modelo só com drift
teste = CADFtest(industrial_prod, type = "drift", max.lag.y = ceiling(12*(length(industrial_prod)/100)^(1/4)),
criterion = "MAIC")
print(teste)
#O teste t NÃO rejeita a hipótese nula de uma raiz unitária, a 10% (p-valor é de 0.8905 > 0.10)
#Vamos conduzir o teste F para detectar se o modelo de fato apresenta drift
print(teste$est.model)
linearHypothesis(teste$est.model,c("(Intercept) = 0", "L(y, 1) = 0" ))
nporg$ip
print(teste$est.model)
qnorm(0.10)
summary(teste)
summary(teste$est.model)
#Vamos rodar o método de ERS com o número de defasagens selecionados pelo MAIC no teste ADF
ur.ers(industrial_prod, type = 'DF-GLS', model = 'constant', lag.max = 5)
#Vamos rodar o método de ERS com o número de defasagens selecionados pelo MAIC no teste ADF
summary(ur.ers(industrial_prod, type = 'DF-GLS', model = 'constant', lag.max = 5))
#Vamos testar a presença de componentes determinísticos.
#Como os dados apresentam tendência estocástica, trabalhamos com a série diferenciadas
trend = 1:(length(industrial_prod)-1)
modelo = lm(diff(industrial_prod)~trend)
coeftest(modelo, vcov. = vcovHAC)
#Decompondo séries de tempo
#Fixando pasta com arquivos
setwd("~/Documentos/GitHub/Econometria-III/codigos/Raiz_Unitaria")
#Carregando pacotes necessários. Instale-os se não os possuir
library("CADFtest") # testes de raiz unitária
library("sandwich") #Erros padrão HAC
library("lmtest") #Teste robusto
library("car") #Teste de restrições lineares
#Carregando dados disponíveis no pacote URCA
library("urca")
data("nporg")
industrial_prod  = ts(log(nporg$ip), start = nporg$year[1], frequency = 1)
plot(industrial_prod)
#Testando a presença de raízes unitárias
#Vamos conduzir os testes a 10% de significância
#Começamos pelo modelo mais completo:
teste = CADFtest(industrial_prod, type = "trend", max.lag.y = ceiling(12*(length(industrial_prod)/100)^(1/4)),
criterion = "MAIC")
print(teste)
#O teste t NÃO rejeita a hipótese nula de uma raiz unitária, a 10% (p-valor é de 0.1394 > 0.10)
#Vamos conduzir o teste F para detectar se o modelo de fato apresenta tendência linear
print(teste$est.model)
linearHypothesis(teste$est.model,c("trnd = 0", "L(y, 1) = 0" ))
#A estatística F é de 4.48865. Usando o Caso 4 da tabela na página 11 dos slides, vemos que, a 10% de significância,
#o valor crítico para 111 observações é 5.47. Como F < 5.47, não rejeitamos a hipótese nula de que tanto gamma como beta são zero.
#Assim, vamos para o modelo só com drift
teste = CADFtest(industrial_prod, type = "drift", max.lag.y = ceiling(12*(length(industrial_prod)/100)^(1/4)),
criterion = "MAIC")
print(teste)
#O teste t NÃO rejeita a hipótese nula de uma raiz unitária, a 10% (p-valor é de 0.8905 > 0.10)
#Vamos conduzir o teste F para detectar se o modelo de fato apresenta drift
print(teste$est.model)
linearHypothesis(teste$est.model,c("(Intercept) = 0", "L(y, 1) = 0" ))
#A estatística F é de 10.211 Usando o Caso 2 da tabela na página 11 dos slides, vemos que, a 10% de significância,
#o valor crítico para 111 observações é 3.86. Como F > 3.86, rejeitamos a nula de que tanto alpha como gamma são zero.
#Como não rejeitamos a nula de que gamma = 0 anteriormente, concluímos que alpha é diferente de zero. Nesse caso, podemos
#repetir o teste de gamma = 0 contra gamma < 0 usando o valor crítico da normal. Esse valor crítico é dado por:
qnorm(0.10)
#Enquanto nossa t é:
summary(teste)
#-0.687
#Logo NÃO REJEITAMOS a nula de raiz unitária a 10%
#Como paramos no modelo com drift, podemos testar a hipótese de raiz unitária usando
#o procedimento de ERS. Esse procedimento está disponível no pacote urca, que carregamos
#anteriormente
#Vamos rodar o método de ERS com o número de defasagens selecionados pelo MAIC no teste ADF
summary(ur.ers(industrial_prod, type = 'DF-GLS', model = 'constant', lag.max = 5))
#Aqui também não rejeitamos a nula de raiz unitária.
#Vamos testar a presença de componentes determinísticos.
#Como os dados apresentam tendência estocástica, trabalhamos com a série diferenciadas
trend = 1:(length(industrial_prod)-1)
modelo = lm(diff(industrial_prod)~trend)
coeftest(modelo, vcov. = vcovHAC)
#Não rejeitamos a nula de que não há componente determinístico
