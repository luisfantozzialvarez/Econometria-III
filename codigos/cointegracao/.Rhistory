#Fixando ambiente
setwd("~/Documents/GitHub/Econometria-III/codigos/cointegracao")
library("CADFtest")
library("car")
library("lmtest")
library("sandwich")
library("vars")
#Pacote para testes de cointegração
library('urca')
divida = read.csv2('dlsp.csv')
divida = ts(divida[,2], start=c(substring(divida[1,1],1,4),substring(divida[1,1],6,7)),frequency=12)
cambio = read.csv2('cambio_real.csv')
cambio = ts(cambio[,2], start=c(substring(cambio[1,1],1,4),substring(cambio[1,1],6,7)),frequency=12)
embi = read.csv2('embi.csv')
embi[,1] = as.Date(embi[,1], format = "%d/%m/%Y")
embi[,3] = format(embi[,1], "%Y-%m")
agg_embi = aggregate(embi[,2], by = list('my' = embi[,3]), FUN = mean, na.rm=T)
risco = ts(agg_embi[,2], start=c(substring(agg_embi[1,1],1,4),substring(agg_embi[1,1],6,7)),frequency=12)
base = cbind(divida,log(cambio), risco)
base = window(base, start = c(2002,1), end = c(2024,03))
plot(base)
#Conclusão dos procedimentos sequenciais (a 5%)
#Três séries apresentam tendência estocástica, e não há componente determinístico
#(drift ou tendência linear) na PRIMEIRA diferença
#Rodando teste
modelo_nivel = lm(divida~., data = base)
po.test(c(base[2,],base[3,]))
po.test(cbin(base[2,],base[3,]))
po.test(cbind(base[2,],base[3,]))
ca.po(cbind(base[2,],base[3,]))
help("ca.po")
po.test(cbind(base[,2],base[,3]))
ca.po(cbind(base[,2],base[,3]))
summary(ca.po(cbind(base[,2],base[,3])))
modelo_nivel = lm(cambio~embi, data = base)
cambio = read.csv2('cambio.csv')
cambio
cambio = read.csv2('cambio_diario.csv')
View(cambio)
embi = read.csv2('embi.csv')
View(embi)
cambio[1,1]
cambio = ts(cambio[,2], start=as.Date(cambio[1,1],format = "%d/%m/%Y"), frequency=1)
cambio
cambio = ts(cambio[,2], start=as.Date(cambio[1,1],format = "%d/%m/%Y"), frequency=365)
cambio = read.csv2('cambio_diario.csv')
cambio = ts(cambio[,2], start=as.Date(cambio[1,1],format = "%d/%m/%Y"), frequency=365)
cambio
divida = read.csv2('ibc.csv')
divida = ts(divida[,2], start=c(substring(divida[1,1],1,4),substring(divida[1,1],6,7)),frequency=12)
divida
m3 = read.csv2('m3.csv')
m3 = ts(log(m3[,2]), start=c(substring(m3[1,1],1,4),substring(m3[1,1],6,7)),frequency=12)
m3
infl = read.csv2('igp.csv')
infl = ts(log(igp[,2]), start=c(substring(igp[1,1],1,4),substring(igp[1,1],6,7)),frequency=12)
igp = read.csv2('igp.csv')
igp = ts(log(igp[,2]), start=c(substring(igp[1,1],1,4),substring(igp[1,1],6,7)),frequency=12)
dados = cbind(produto,m3,igp)
ibc = read.csv2('ibc.csv')
ibc = ts(log(ibc[,2]), start=c(substring(ibc[1,1],1,4),substring(ibc[1,1],6,7)),frequency=12)
m3 = read.csv2('m3.csv')
m3 = ts(log(m3[,2]), start=c(substring(m3[1,1],1,4),substring(m3[1,1],6,7)),frequency=12)
igp = read.csv2('igp.csv')
igp = ts(log(igp[,2]), start=c(substring(igp[1,1],1,4),substring(igp[1,1],6,7)),frequency=12)
dados = cbind(produto,m3,igp)
dados = cbind(ibc,m3,igp)
dados
dados = window(dados, start = c(2003,1))
dados
dados = window(dados, start = c(2003,1), end = c(2024,3))
dados
dados = window(dados, start = c(2003,1), end = c(2024,2))
dados
plot(dados)
teste = CADFtest(dados[,1], type = "trend", max.lag.y = ceiling(12*(length(dados[,1])/100)^(1/4)),
criterion = "MAIC")
summary(teste)
print(teste$est.model)
linearHypothesis(teste$est.model,c("trnd = 0", "L(y, 1) = 0" ))
teste = CADFtest(dados[,1], type = "drift", max.lag.y = ceiling(12*(length(dados[,1])/100)^(1/4)),
criterion = "MAIC")
summary(teste)
print(teste$est.model)
linearHypothesis(teste$est.model,c("(Intercept) = 0", "L(y, 1) = 0" ))
linearHypothesis(teste$est.model,c("(Intercept) = 0", "L(y, 1 = 0" ))
linearHypothesis(teste$est.model,c("(Intercept) = 0", "L(y, 1) = 0" ))
summary(teste)
teste = CADFtest(dados[,1], type = "drift", max.lag.y = ceiling(12*(length(dados[,1])/100)^(1/4)),
criterion = "MAIC")
summary(teste)
print(teste$est.model)
linearHypothesis(teste$est.model,c("(Intercept) = 0", "L(y, 1) = 0" ))
teste = CADFtest(dados[,1], type = "none", max.lag.y = ceiling(12*(length(dados[,1])/100)^(1/4)),
criterion = "MAIC")
summary(teste)
print(teste$est.model)
linearHypothesis(teste$est.model,c("(Intercept) = 0", "L(y, 1) = 0" ))
teste = CADFtest(dados[,1], type = "none", max.lag.y = ceiling(12*(length(dados[,1])/100)^(1/4)),
criterion = "MAIC")
summary(teste)
trnd = 1:(nrow(dados)-1)
coeftest(lm(diff(dados[,1])~trnd), vcov. = vcovHAC)
teste = CADFtest(dados[,2], type = "trend", max.lag.y = ceiling(12*(length(dados[,1])/100)^(1/4)),
criterion = "MAIC")
summary(teste)
teste = CADFtest(dados[,2], type = "trend", max.lag.y = ceiling(12*(length(dados[,2])/100)^(1/4)),
criterion = "MAIC")
summary(teste)
print(teste$est.model)
linearHypothesis(teste$est.model,c("trnd = 0", "L(y, 1) = 0" ))
ceiling(12*(length(dados[,2])/100)^(1/4))
print(teste$est.model)
linearHypothesis(teste$est.model,c("trnd = 0", "L(y, 1) = 0" ))
teste = CADFtest(dados[,2], type = "trend", max.lag.y = ceiling(12*(length(dados[,2])/100)^(1/4)),
criterion = "MAIC")
summary(teste)
coeftest(lm(diff(dados[,2])~trnd), vcov. = vcovHAC)
coeftest(lm(diff(dados[,3])~trnd), vcov. = vcovHAC)
teste = CADFtest(dados[,3], type = "trend", max.lag.y = ceiling(12*(length(dados[,3])/100)^(1/4)),
criterion = "MAIC")
summary(teste)
print(teste$est.model)
linearHypothesis(teste$est.model,c("trnd = 0", "L(y, 1) = 0" ))
teste = CADFtest(dados[,3], type = "drift", max.lag.y = ceiling(12*(length(dados[,3])/100)^(1/4)),
criterion = "MAIC")
summary(teste)
print(teste$est.model)
linearHypothesis(teste$est.model,c("(Intercept) = 0", "L(y, 1) = 0" ))
m1 = read.csv2('m1.csv')
m1 = ts(log(m1[,2]), start=c(substring(m1[1,1],1,4),substring(m1[1,1],6,7)),frequency=12)
teste = CADFtest(dados[,3], type = "trend", max.lag.y = ceiling(12*(length(dados[,3])/100)^(1/4)),
criterion = "MAIC")
summary(teste)
print(teste$est.model)
linearHypothesis(teste$est.model,c("trnd = 0", "L(y, 1) = 0" ))
dados = cbind(ibc,m1,igp)
dados = window(dados, start = c(2003,1), end = c(2024,2))
plot(dados)
teste = CADFtest(dados[,2], type = "trend", max.lag.y = ceiling(12*(length(dados[,2])/100)^(1/4)),
criterion = "MAIC")
summary(teste)
print(teste$est.model)
linearHypothesis(teste$est.model,c("trnd = 0", "L(y, 1) = 0" ))
rm(list=ls())
#Fixando ambiente
setwd("~/Documents/GitHub/Econometria-III/codigos/cointegracao")
library("CADFtest")
library("car")
library("lmtest")
library("sandwich")
library("vars")
#Pacote para testes de cointegração
library('urca')
ibc = read.csv2('ibc.csv')
ibc = ts(log(ibc[,2]), start=c(substring(ibc[1,1],1,4),substring(ibc[1,1],6,7)),frequency=12)
m1 = read.csv2('m1.csv')
m1 = ts(log(m1[,2]), start=c(substring(m1[1,1],1,4),substring(m1[1,1],6,7)),frequency=12)
igp = read.csv2('igp.csv')
igp = ts(log(igp[,2]), start=c(substring(igp[1,1],1,4),substring(igp[1,1],6,7)),frequency=12)
dados = cbind(ibc,m1,igp)
dados = window(dados, start = c(2003,1), end = c(2024,2))
teste = CADFtest(dados[,2], type = "trend", max.lag.y = ceiling(12*(length(dados[,2])/100)^(1/4)),
criterion = "MAIC")
summary(teste)
print(teste$est.model)
linearHypothesis(teste$est.model,c("trnd = 0", "L(y, 1) = 0" ))
teste = CADFtest(dados[,2], type = "none", max.lag.y = ceiling(12*(length(dados[,2])/100)^(1/4)),
criterion = "MAIC")
summary(teste)
teste = CADFtest(dados[,2], type = "drift", max.lag.y = ceiling(12*(length(dados[,2])/100)^(1/4)),
criterion = "MAIC")
summary(teste)
print(teste$est.model)
linearHypothesis(teste$est.model,c("(Intercept) = 0", "L(y, 1) = 0" ))
teste = CADFtest(dados[,2], type = "drift", max.lag.y = ceiling(12*(length(dados[,2])/100)^(1/4)),
criterion = "MAIC")
summary(teste)
print(teste$est.model)
linearHypothesis(teste$est.model,c("(Intercept) = 0", "L(y, 1) = 0" ))
coeftest(lm(diff(dados[,2])~trnd), vcov. = vcovHAC)
trnd = 1:(nrow(dados)-1)
coeftest(lm(diff(dados[,2])~trnd), vcov. = vcovHAC)
coeftest(lm(diff(dados[,1])~trnd), vcov. = vcovHAC)
coeftest(lm(diff(dados[,3])~trnd), vcov. = vcovHAC)
po.test(dados)
teste = lm(igp~m1+ibc)
teste = lm(igp~m1+ibc, data=dados)
CADFtest(residuals(teste), model = "none", max.lag.y = ceiling(12*(length(residuals(teste))/100))^(1/4))
residuals(teste)
CADFtest(residuals(teste), model = "none", max.lag.y = ceiling(12*(length(residuals(teste))/100))^(1/4))
length(residuals(teste))
CADFtest(residuals(teste), model = "none", max.lag.y = ceiling(12*(length(residuals(teste))/100))^(1/4),
criterion = "MAIC")
teste = lm(igp~m1+ibc, data=dados)
res= ts(residuals(teste),start = c(2003,1))
help("pp.test")
lm(res~lag(res))
CADFtest(res, model = "none", max.lag.y = ceiling(12*(length(residuals(teste))/100))^(1/4),
criterion = "MAIC")
ceiling(12*(length(res)/100)^(1/4))
CADFtest(res, model = "none", max.lag.y = ceiling(12*(length(res)/100)^(1/4)),
criterion = "MAIC")
res
res= ts(residuals(teste),start = c(2003,1),frequency=12)
CADFtest(res, model = "none", max.lag.y = ceiling(12*(length(res)/100)^(1/4)),
criterion = "MAIC")
res
dados
teste = lm(igp~m1+ibc, data=dados)
residuals(teste)
res= ts(residuals(teste),start = c(2003,1),frequency=12)
CADFtest(res, model = "none", max.lag.y = ceiling(12*(length(res)/100)^(1/4)),
criterion = "MAIC")
res
CADFtest(res, model = "none", max.lag.y = ceiling(12*(length(res)/100)^(1/4)),
criterion = "MAIC")
pp.test(res)
help("CADFtest")
CADFtest(X=res, model = "none", max.lag.y = ceiling(12*(length(res)/100)^(1/4)),
criterion = "MAIC")
help(ur.pp)
ur.pp(res, type = c("Z-tau"))
teste
help("ca.jo")
ca.jo(dados, ecdet = c('none'),spec='transitory', K=5, season = 12)
summary(ca.jo(dados, ecdet = c('none'),spec='transitory', K=5, season = 12))
VARselect(dados, lag.max = 20, type = c("const"))
help("VARselect")
VARselect(dados, lag.max = 20, type = c("const"),season = 12)
VAR(dados, p=5, type = c("const"),seaso)
VAR(dados, p=5, type = c("const"),season=12)
acf(dados)
acf(diff(dados))
VAR(dados, p=5, type = c("const"),season=12)
summary(ca.jo(dados, ecdet = c('none'),spec='transitory', K=5, season = 12))
help("ca.jo")
summary(ca.jo(dados, type = c('trace') ecdet = c('none'),spec='transitory', K=5, season = 12))
summary(ca.jo(dados, type = c('trace'), ecdet = c('none'),spec='transitory', K=5, season = 12))
summary(ca.jo(dados, type = c('eigen'), ecdet = c('none'),spec='transitory', K=5, season = 12))
VARselect(dados, lag.max = 20, type = c("const"),season = 12)
var = VAR(dados, p=5, type = c("const"),season=12)
logLik(var)
logLik(var) -logLik(VAR(dados, p=4, type='const',season=12))
VARselect(dados, lag.max = 20, type = c("const"),season = 12)
var = VAR(dados, p=2, type = c("const"),season=12)
2*(logLik(var) -logLik(VAR(dados, p=1, type='const',season=12)))
serial.test(var)
VARselect(dados, lag.max = 20, type = c("const"),season = 12)
var = VAR(dados, p=5, type = c("const"),season=12)
serial.test(var)
help("serial.test")
VARselect(dados, lag.max = 20, type = c("const"),season = 12)
var = VAR(dados, p=5, type = c("const"),season=12)
serial.test(var,type='PT.adjusted')
VARselect(dados, lag.max = 20, type = c("const"),season = 12)
var = VAR(dados, p=4, type = c("const"),season=12)
serial.test(var,type='PT.adjusted')
VARselect(dados, lag.max = 5, type = c("const"),season = 12)
var = VAR(dados, p=5, type = c("const"),season=12)
serial.test(var,lags.pt = 10, type='PT.adjusted')
VARselect(dados, lag.max = 5, type = c("const"),season = 12)
var = VAR(dados, p=5, type = c("const"),season=12)
serial.test(var,lags.pt = 12, type='PT.adjusted')
VARselect(dados, lag.max = 5, type = c("const"),season = 12)
var = VAR(dados, p=5, type = c("const"),season=12)
lgl = 2*(logLik(var)-logLik( VAR(dados, p=4, type = c("const"),season=12)))
lgl
VARselect(dados, lag.max = 5, type = c("const"),season = 12)
var = VAR(dados, p=4, type = c("const"),season=12)
lgl = 2*(logLik(var)-logLik( VAR(dados, p=3, type = c("const"),season=12)))
lgl
VARselect(dados, lag.max = 5, type = c("const"),season = 12)
var = VAR(dados, p=4, type = c("const"),season=12)
lgl = 2*(logLik(var)-logLik( VAR(dados, p=3, type = c("const"),season=12)))
lgl
var
logLik
logLik(var)-
2*(logLik(var)-logLik( VAR(dados, p=3, type = c("const"),season=12)))
logLik( VAR(dados, p=3, type = c("const"),season=12))
logLik(var)
VAR(dados, p=4, type = c("const"),season=12)
lgl = 2*(logLik(var)-logLik( VAR(dados, p=2, type = c("const"),season=12)))
lgl
VARselect(dados, lag.max = 20, type = c("const"),season = 12)
summary(ca.jo(dados, type = c('eigen'), ecdet = c('none'),spec='transitory', K=5, season = 12))
VARselect(dados, lag.max = 20, type = c("const"),season = 12)
summary(ca.jo(dados, type = c('eigen'), ecdet = c('none'),spec='transitory', K=5, season = 12))
dados
diff(dados[c("ibc","m1")])
diff(dados[,c("ibc","m1")])
acf(cbind(diff(dados[,c("ibc","m1")]), res))
res
bind(diff(dados[,c("ibc","m1")]), res)
cbind(diff(dados[,c("ibc","m1")]), res)
acf(cbind(diff(dados[,c("ibc","m1")]), res))
est = cbind(diff(dados[,c("ibc","m1")]), res)
est= est[-1,]
acf(est)
help(confint)
#Alguma evidência pontual de correlação, o que sugere que devemos tomar cuidado com a
#inferência no vetor de cointegração.
coefci(teste, vcov. = vcovHAC)
#Vamos checar isso
est = cbind(diff(dados[,c("ibc","m1")]), res)
colnames(est) = c('d_ibc','d_m1', 'err')
est= est[-1,]
acf(est)
#Alguma evidência pontual de correlação, o que sugere que devemos tomar cuidado com a
#inferência no vetor de cointegração.
coefci(teste, vcov. = vcovHAC)
coefci(teste, vcov. = vcovHAC)
library(urca)
bh6lrtest
#Fixando ambiente
setwd("~/Documents/GitHub/Econometria-III/codigos/cointegracao")
setwd("~/Documentos/GitHub/Econometria-III/codigos/cointegracao")
#Fixando ambiente
setwd("~/Documentos/GitHub/Econometria-III/codigos/cointegracao")
library("CADFtest")
library("car")
library("lmtest")
library("sandwich")
library("vars")
#Pacote para testes de cointegração
library('urca')
library('vars')
ibc = read.csv2('ibc.csv')
ibc = ts(log(ibc[,2]), start=c(substring(ibc[1,1],1,4),substring(ibc[1,1],6,7)),frequency=12)
m1 = read.csv2('m1.csv')
m1 = ts(log(m1[,2]), start=c(substring(m1[1,1],1,4),substring(m1[1,1],6,7)),frequency=12)
igp = read.csv2('igp.csv')
igp = ts(log(igp[,2]), start=c(substring(igp[1,1],1,4),substring(igp[1,1],6,7)),frequency=12)
dados = cbind(ibc,m1,igp)
dados = window(dados, start = c(2003,1), end = c(2024,2))
#Ao rodar o procedimento sequencial, notamos que todas as séries são I(1),
#e que m1 e igp exibem drift (intercepto na primeira diferença)
#Evidência de sazonalidade
acf(diff(dados),max.lag=40)
#Fixando ambiente
setwd("~/Documentos/GitHub/Econometria-III/codigos/cointegracao")
library("CADFtest")
library("car")
library("lmtest")
library("sandwich")
library("vars")
#Pacote para testes de cointegração
library('urca')
library('vars')
ibc = read.csv2('ibc.csv')
ibc = ts(log(ibc[,2]), start=c(substring(ibc[1,1],1,4),substring(ibc[1,1],6,7)),frequency=12)
m1 = read.csv2('m1.csv')
m1 = ts(log(m1[,2]), start=c(substring(m1[1,1],1,4),substring(m1[1,1],6,7)),frequency=12)
igp = read.csv2('igp.csv')
igp = ts(log(igp[,2]), start=c(substring(igp[1,1],1,4),substring(igp[1,1],6,7)),frequency=12)
dados = cbind(ibc,m1,igp)
dados = window(dados, start = c(2003,1), end = c(2024,2))
#Ao rodar o procedimento sequencial, notamos que todas as séries são I(1),
#e que m1 e igp exibem drift (intercepto na primeira diferença)
#Evidência de sazonalidade
acf(diff(dados),max.lag=40)
#Evidência de sazonalidade
acf(diff(dados),lag.max=40)
#Selecionando coeficientes com base no VAR em nível. Note que, como há drift,
#devemos incluir uma tendência linear em nível
criterios = VARselect(dados, lag.max = 20, type = 'const', season=12)
#Selecionando com base no BIC
modelo_nivel = VAR(dados, type = 'const', p=2, season=12)
summary(modelo_nivel)
LM = 2*(logLik(modelo_nivel)- logLik(VAR(dados, type = 'const', p=1, season=12)))
print(LM>qchisq(0.95,9))
serial.test(modelo_nivel, type = 'BG', lags.bg =5)
#Aumentando
modelo_nivel = VAR(dados, type = 'const', p=3, season=12)
LM = 2*(logLik(modelo_nivel)- logLik(VAR(dados, type = 'const', p=2, season=12)))
print(LM>qchisq(0.95,9))
serial.test(modelo_nivel, type = 'BG', lags.bg =5)
#Fixando ambiente
setwd("~/Documentos/GitHub/Econometria-III/codigos/cointegracao")
library("CADFtest")
library("car")
library("lmtest")
library("sandwich")
library("vars")
#Pacote para testes de cointegração
library('urca')
library('vars')
ibc = read.csv2('ibc.csv')
ibc = ts(log(ibc[,2]), start=c(substring(ibc[1,1],1,4),substring(ibc[1,1],6,7)),frequency=12)
m1 = read.csv2('m1.csv')
m1 = ts(log(m1[,2]), start=c(substring(m1[1,1],1,4),substring(m1[1,1],6,7)),frequency=12)
igp = read.csv2('igp.csv')
igp = ts(log(igp[,2]), start=c(substring(igp[1,1],1,4),substring(igp[1,1],6,7)),frequency=12)
dados = cbind(ibc,m1,igp)
dados = window(dados, start = c(2003,1), end = c(2024,2))
#Ao rodar o procedimento sequencial, notamos que todas as séries são I(1),
#e que m1 e igp exibem drift (intercepto na primeira diferença)
#Evidência de sazonalidade
acf(diff(dados),lag.max=40)
#Selecionando coeficientes com base no VAR em nível. Note que, como há drift,
#devemos incluir uma tendência linear em nível
criterios = VARselect(dados, lag.max = 20, type = 'const', season=12)
#Selecionando com base no BIC
modelo_nivel = VAR(dados, type = 'const', p=2, season=12)
summary(modelo_nivel)
LM = 2*(logLik(modelo_nivel)- logLik(VAR(dados, type = 'const', p=1, season=12)))
print(LM>qchisq(0.95,9))
#Vamos olhar o teste de Breusch-Godfrey de não correlação serial
serial.test(modelo_nivel, type = 'BG', lags.bg =5)
#Aumentando
modelo_nivel = VAR(dados, type = 'const', p=3, season=12)
LM = 2*(logLik(modelo_nivel)- logLik(VAR(dados, type = 'const', p=2, season=12)))
print(LM>qchisq(0.95,9))
serial.test(modelo_nivel, type = 'BG', lags.bg =5)
print(LM>qchisq(0.95,9))
qchisq(0.95,9)
LM
qchisq(0.95,9))
qchisq(0.95,9)
modelo_nivel = VAR(dados, type = 'const', p=3, season=12)
LM = 2*(logLik(modelo_nivel)- logLik(VAR(dados, type = 'const', p=2, season=12)))
print(LM>qchisq(0.95,9))
print(LM>qchisq(0.9,9))
serial.test(modelo_nivel, type = 'BG', lags.bg =5)
